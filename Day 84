/*
class Node {
    int data;
    Node left, right;

    Node(int key) {
        data = key;
        left = right = null;
    }
}
*/

class Solution {
    static int preIndex = 0;
    static Map<Integer, Integer> inorderMap = new HashMap<>();
    public static Node buildTree(int inorder[], int preorder[]) {
        // code here
        preIndex = 0;
        inorderMap.clear();
        
        for(int i = 0; i < inorder.length; i++){
            inorderMap.put(inorder[i], i);
        }
        return buildTreeHelper(preorder, 0, inorder.length - 1);
    }
    
    private static Node buildTreeHelper(int[] preorder, int inStart, int inEnd){
        if(inStart > inEnd) return null;
        
        int rootVal = preorder[preIndex++];
        Node root = new Node(rootVal);
        
        int inIndex = inorderMap.get(rootVal);
        
        root.left = buildTreeHelper(preorder, inStart, inIndex - 1);
        root.right = buildTreeHelper(preorder, inIndex + 1, inEnd);
        
        return root;
    }
    
    public static void printPostOrder(Node root) {
        if(root == null) return;
        printPostOrder(root.left);
        printPostOrder(root.right);
        System.out.print(root.data + " ");
    }
}
