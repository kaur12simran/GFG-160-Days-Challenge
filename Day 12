//{ Driver Code Starts
import java.io.*;
import java.util.*;

class Sorting {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        for (int g = 0; g < t; g++) {
            String[] str = (br.readLine()).trim().split(" ");
            int arr[] = new int[str.length];
            for (int i = 0; i < str.length; i++) arr[i] = Integer.parseInt(str[i]);
            System.out.println(new Solution().circularSubarraySum(arr));
            System.out.println("~");
        }
    }
}
// } Driver Code Ends


class Solution {

    // a: input array
    // n: size of array
    // Function to find maximum circular subarray sum.
    public int circularSubarraySum(int arr[]) {

        // Your code here
        int n = arr.length;
        
        int totalSum = 0;
        for(int num : arr) {
            totalSum += num;
        }
        
        int maxN = maxSubarraySum(arr);
        int minN = minSubarraySum(arr);
        
        int maxCir = totalSum - minN;
        if(maxCir == 0) {
            return maxN;
        }
        return Math.max(maxN, maxCir);
    }
    
    private int maxSubarraySum(int[] arr){
        int maxSoFar = arr[0];
        int maxEnding = arr[0];
        
        for(int i = 1; i < arr.length; i++){
            maxEnding = Math.max(arr[i], maxEnding + arr[i]);
            maxSoFar = Math.max(maxSoFar, maxEnding);
        }
        return maxSoFar;
    }
    
    private int minSubarraySum(int[] arr){
        
      int minSoFar = arr[0];
      int minEnding = arr[0];
      
      for(int i = 1; i < arr.length; i++){
          
          minEnding = Math.min(arr[i], minEnding + arr[i]);
          minSoFar = Math.min(minSoFar, minEnding);
      }
      return minSoFar;
    }
}
