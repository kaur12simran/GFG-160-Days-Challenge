class Solution {
    public boolean isBridge(int V, int[][] edges, int c, int d) {
        // code here
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for(int[] e : edges) {
            int u = e[0], v = e[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        int componentsBefore = countcomponents(V, adj);
        
        adj.get(c).remove(Integer.valueOf(d));
        adj.get(d).remove(Integer.valueOf(c));
        
        int componentsAfter = countcomponents(V, adj);
        
        return componentsAfter > componentsBefore;
    }
    
    private int countcomponents(int V, List<List<Integer>> adj) {
        boolean[] visited = new boolean[V];
        int count = 0; 
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                count++;
                dfs(i, adj, visited);
            }
        }
        return count;
    }
    
    private void dfs(int node, List<List<Integer>> adj, boolean[] visited) {
        visited[node] = true;
        for(int nei : adj.get(node)) {
            if(!visited[nei]) dfs(nei, adj, visited);
        }
    }
}
