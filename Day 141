class Solution {
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        DSU dsu = new DSU(V);
        for(int[] e : edges) {
            int u = e[0], v = e[1];
            int ru = dsu.find(u), rv = dsu.find(v);
            if(ru == rv) return true;
            dsu.union(ru, rv);
        }
        return false;
    }
    
    static class DSU {
        int[] parent, size;
        DSU(int n) {
            parent = new int[n];
            size = new int[n];
            for(int i = 0; i < n; i++) {
                parent[i] = i; 
                size[i] = 1; }
        }
        
        int find(int x) {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }
        
        void union(int a, int b) {
            if(a == b) return;
            if(size[a] < size[b]) {int t = a; a = b; b = t;}
            parent[b] = a;
            size[a] += size[b];
        }
    }
}
