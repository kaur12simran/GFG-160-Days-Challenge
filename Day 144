class Solution {
    public boolean isCyclic(int V, int[][] edges) {
        // code here
        List<List<Integer>> adj  = new ArrayList<>();
        for(int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for(int[] e : edges) {
            adj.get(e[0]).add(e[1]);
        }
        
        boolean[] visited = new boolean[V];
        boolean[] recStack = new boolean[V];
        
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                if(dfs(i, adj, visited, recStack)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean dfs(int node, List<List<Integer>> adj, boolean[] visited, boolean[] recStack) {
        visited[node] = true;
        recStack[node] = true;
        
        for(int neigh : adj.get(node)) {
            if(!visited[neigh]) {
                if(dfs(neigh, adj, visited, recStack)) return true;
            } else if(recStack[neigh]) {
                return true;
            }
        }
        
        recStack[node] = false;
        return false;
    }
}
