

class Solution {

    public int minCost(int[][] houses) {
        // code here
        int n = houses.length;
        boolean[] visited = new boolean[n];
        int connected = 0;
        int totalCost = 0;
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        
        pq.offer(new int[]{0, 0});
        
        while(connected < n) {
            int[] current = pq.poll();
            int cost = current[0];
            int idx = current[1];
            
            if(visited[idx]) continue;
            
            visited[idx] = true;
            totalCost += cost;
            connected++;
            
            for(int i = 0; i < n; i++) {
                if(!visited[i]) {
                    int dist = Math.abs(houses[idx][0] - houses[i][0]) + Math.abs(houses[idx][1] - houses[i][1]);
                    pq.offer(new int[]{dist, i});
                }
            }
        }
        return totalCost;
    }
}
