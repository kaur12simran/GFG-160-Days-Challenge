class Solution {
    private int n, m;
    private boolean[][] visited;
    private char[][] grid;
    
    private int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
    private int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};
    
    public int countIslands(char[][] grid) {
        // Code here
       if(grid == null || grid.length == 0) return 0;
       
       this.grid = grid;
       n = grid.length;
       m = grid[0].length;
       visited = new boolean[n][m];
       
       int count = 0;
       
       for(int i = 0; i < n; i++) {
           for(int j = 0 ; j < m; j++) {
               if(!visited[i][j] && grid[i][j] == 'L') {
                   dfs(i, j);
                   count++;
               }
           }
       }
       return count;
    }
    
    private void dfs(int x, int y) {
        visited[x][y] = true;
        
        for(int dir = 0; dir < 8; dir++) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
            
            if(isValid(nx, ny)) {
                dfs(nx, ny);
            }
        }
    }
    
    private boolean isValid(int x, int y) {
        return (x >= 0 && x < n && y >= 0 && y < m && !visited[x][y] && grid[x][y] =='L');
    }
}
