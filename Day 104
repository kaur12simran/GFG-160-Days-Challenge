
class Solution {
    public ArrayList<Integer> maxOfMins(int[] arr) {
        // Your code here
        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> st = new Stack<>();
        
        for(int i = 0; i < n; i++) {
            while(!st.isEmpty() && arr[st.peek()] >= arr[i])
            st.pop();
            left[i] = (st.isEmpty()) ? -1 : st.peek();
            st.push(i);
        }
        st.clear();
        
        for(int i = n - 1; i >= 0; i--) {
            while(!st.isEmpty() && arr[st.peek()] >= arr[i])
            st.pop();
            right[i] = (st.isEmpty()) ? n : st.peek();
            st.push(i);
        }
        
        int[] res = new int[n + 1];
        Arrays.fill(res, 0);
        
        for(int i = 0; i < n; i++) {
            int len = right[i] - left[i] - 1;
            res[len] = Math.max(res[len], arr[i]);
        }
        
        for(int i = n - 1; i >= 1; i--) {
            res[i] = Math.max(res[i], res[i + 1]);
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i = 1; i <= n; i++){
        ans.add(res[i]);
    }
    return ans;
}
}
