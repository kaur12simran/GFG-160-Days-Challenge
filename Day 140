class Solution {
    public int orangesRotting(int[][] mat) {
        // Code here
        if(mat == null || mat.length == 0 || mat[0].length == 0) return -1;
        
        int n = mat.length;
        int m = mat[0].length;
        
        Deque<int[]> q = new ArrayDeque<>();
        int fresh = 0;
        int minutes = 0;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++) {
                if(mat[i][j] == 2) {
                    q.offer(new int[]{i, j, 0});
                } else if(mat[i][j] == 1) {
                    fresh++;
                }
            }
        }
        
        if(fresh == 0) return 0;
        
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        
        while(!q.isEmpty()) {
            int[] cur = q.poll();
            int r = cur[0], c = cur[1], t = cur[2];
            
            minutes = Math.max(minutes, t);
            
            for(int[] d : dirs) {
                int nr = r + d[0];
                int nc = c + d[1];
                
                if(nr >= 0 && nr < n && nc >= 0 && nc < m && mat[nr][nc] == 1) {
                    mat[nr][nc] = 2;
                    fresh--;
                    q.offer(new int[]{nr, nc, t + 1});
                }
            }
        }
        
        return (fresh == 0) ? minutes : -1;
    }
}
